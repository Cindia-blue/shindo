#!/usr/bin/env ruby
require File.join(File.dirname(__FILE__), '..', 'lib', 'shindo')

helpers = Dir.glob(File.join(Dir.pwd, 'tests', '**', '*helper.rb')).sort_by {|helper| helper.count(File::SEPARATOR)}
tags = []
for argument in ARGV
  if argument.match(/^[\+\-]/)
    tags << argument
  else
    path = File.expand_path(argument)
    if File.directory?(path)
      tests ||= []
      tests |= Dir.glob(File.join(path, '**', '*tests.rb'))
    elsif File.exists?(path)
      tests ||= []
      tests << path
    else
      Formatador.display_line("[red][bold]#{argument}[/] [red]does not exist, please fix this path and try again.[/]")
      Kernel.exit(1)
    end
  end
end

# ARGV was empty or only contained tags
unless tests
  tests = Dir.glob(File.join('tests', '**', '*tests.rb'))
end

@success = true
@started_at = Time.now
def run_in_thread(helpers, tests, tags)
  shindo = Thread.new {
    Thread.current[:tags] = tags
    for file in helpers
      load(file)
    end
    for file in tests
      load(file)
    end
  }
  shindo.join
  if shindo[:reload]
    @success = true
    run_in_thread(helpers, tests, tags)
  else
    @success = @success && shindo[:success]
  end
end
run_in_thread(helpers, tests, tags)

Formatador.display_line
Formatador.display_line("#{@success ? '[green]Success' : '[red]Failure'} [light_black]in[/] #{Time.now - @started_at} [light_black]seconds[/]")
Formatador.display_line

if @success
  Kernel.exit(0)
else
  Kernel.exit(1)
end
